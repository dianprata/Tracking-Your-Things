'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.genElementSymbol = genElementSymbol;
exports.genInteractiveElements = genInteractiveElements;
exports.genInteractiveRoleElements = genInteractiveRoleElements;
exports.genNonInteractiveElements = genNonInteractiveElements;
exports.genNonInteractiveRoleElements = genNonInteractiveRoleElements;
exports.genAbstractRoleElements = genAbstractRoleElements;
exports.genNonAbstractRoleElements = genNonAbstractRoleElements;
exports.genIndeterminantInteractiveElements = genIndeterminantInteractiveElements;

var _ariaQuery = require('aria-query');

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _JSXAttributeMock = require('./JSXAttributeMock');

var _JSXAttributeMock2 = _interopRequireDefault(_JSXAttributeMock);

var _JSXElementMock = require('./JSXElementMock');

var _JSXElementMock2 = _interopRequireDefault(_JSXElementMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var domElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));
var roleNames = [].concat(_toConsumableArray(_ariaQuery.roles.keys()));

var interactiveElementsMap = {
  a: [{ prop: 'href', value: '#' }],
  area: [{ prop: 'href', value: '#' }],
  audio: [],
  button: [],
  canvas: [],
  embed: [],
  link: [],
  input: [],
  'input[type="button"]': [{ prop: 'type', value: 'button' }],
  'input[type="checkbox"]': [{ prop: 'type', value: 'checkbox' }],
  'input[type="color"]': [{ prop: 'type', value: 'color' }],
  'input[type="date"]': [{ prop: 'type', value: 'date' }],
  'input[type="datetime"]': [{ prop: 'type', value: 'datetime' }],
  'input[type="email"]': [{ prop: 'type', value: 'email' }],
  'input[type="file"]': [{ prop: 'type', value: 'file' }],
  'input[type="image"]': [{ prop: 'type', value: 'image' }],
  'input[type="month"]': [{ prop: 'type', value: 'month' }],
  'input[type="number"]': [{ prop: 'type', value: 'number' }],
  'input[type="password"]': [{ prop: 'type', value: 'password' }],
  'input[type="radio"]': [{ prop: 'type', value: 'radio' }],
  'input[type="range"]': [{ prop: 'type', value: 'range' }],
  'input[type="reset"]': [{ prop: 'type', value: 'reset' }],
  'input[type="search"]': [{ prop: 'type', value: 'search' }],
  'input[type="submit"]': [{ prop: 'type', value: 'submit' }],
  'input[type="tel"]': [{ prop: 'type', value: 'tel' }],
  'input[type="text"]': [{ prop: 'type', value: 'text' }],
  'input[type="time"]': [{ prop: 'type', value: 'time' }],
  'input[type="url"]': [{ prop: 'type', value: 'url' }],
  'input[type="week"]': [{ prop: 'type', value: 'week' }],
  menuitem: [],
  option: [],
  select: [],
  // Whereas ARIA makes a distinction between cell and gridcell, the AXObject
  // treats them both as CellRole and since gridcell is interactive, we consider
  // cell interactive as well.
  // td: [],
  th: [],
  tr: [],
  textarea: [],
  video: []
};

var nonInteractiveElementsMap = {
  abbr: [],
  article: [],
  blockquote: [],
  br: [],
  caption: [],
  dd: [],
  details: [],
  dfn: [],
  dialog: [],
  dir: [],
  dl: [],
  dt: [],
  fieldset: [],
  figcaption: [],
  figure: [],
  footer: [],
  form: [],
  frame: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  hr: [],
  iframe: [],
  img: [],
  label: [],
  legend: [],
  li: [],
  main: [],
  mark: [],
  marquee: [],
  menu: [],
  meter: [],
  nav: [],
  ol: [],
  p: [],
  pre: [],
  progress: [],
  ruby: [],
  table: [],
  tbody: [],
  td: [],
  tfoot: [],
  thead: [],
  time: [],
  ul: []
};

var indeterminantInteractiveElementsMap = domElements.reduce(function (accumulator, name) {
  return _extends({}, accumulator, _defineProperty({}, name, []));
}, {});

Object.keys(interactiveElementsMap).concat(Object.keys(nonInteractiveElementsMap)).forEach(function (name) {
  return delete indeterminantInteractiveElementsMap[name];
});

var abstractRoles = roleNames.filter(function (role) {
  return _ariaQuery.roles.get(role).abstract;
});

var nonAbstractRoles = roleNames.filter(function (role) {
  return !_ariaQuery.roles.get(role).abstract;
});

var interactiveRoles = [].concat(roleNames,
// 'toolbar' does not descend from widget, but it does support
// aria-activedescendant, thus in practice we treat it as a widget.
'toolbar').filter(function (role) {
  return !_ariaQuery.roles.get(role).abstract;
}).filter(function (role) {
  return _ariaQuery.roles.get(role).superClass.some(function (klasses) {
    return (0, _arrayIncludes2.default)(klasses, 'widget');
  });
});

var nonInteractiveRoles = roleNames.filter(function (role) {
  return !_ariaQuery.roles.get(role).abstract;
}).filter(function (role) {
  return !_ariaQuery.roles.get(role).superClass.some(function (klasses) {
    return (0, _arrayIncludes2.default)(klasses, 'widget');
  });
})
// 'toolbar' does not descend from widget, but it does support
// aria-activedescendant, thus in practice we treat it as a widget.
.filter(function (role) {
  return !(0, _arrayIncludes2.default)(['toolbar'], role);
});

function genElementSymbol(openingElement) {
  return openingElement.name.name + (openingElement.attributes.length > 0 ? '' + openingElement.attributes.map(function (attr) {
    return '[' + attr.name.name + '="' + attr.value.value + '"]';
  }).join('') : '');
}

function genInteractiveElements() {
  return Object.keys(interactiveElementsMap).map(function (elementSymbol) {
    var bracketIndex = elementSymbol.indexOf('[');
    var name = elementSymbol;
    if (bracketIndex > -1) {
      name = elementSymbol.slice(0, bracketIndex);
    }
    var attributes = interactiveElementsMap[elementSymbol].map(function (_ref) {
      var prop = _ref.prop,
          value = _ref.value;
      return (0, _JSXAttributeMock2.default)(prop, value);
    });
    return (0, _JSXElementMock2.default)(name, attributes);
  });
}

function genInteractiveRoleElements() {
  return [].concat(_toConsumableArray(interactiveRoles), ['button article', 'fakerole button article']).map(function (value) {
    return (0, _JSXElementMock2.default)('div', [(0, _JSXAttributeMock2.default)('role', value)]);
  });
}

function genNonInteractiveElements() {
  return Object.keys(nonInteractiveElementsMap).map(function (elementSymbol) {
    var bracketIndex = elementSymbol.indexOf('[');
    var name = elementSymbol;
    if (bracketIndex > -1) {
      name = elementSymbol.slice(0, bracketIndex);
    }
    var attributes = nonInteractiveElementsMap[elementSymbol].map(function (_ref2) {
      var prop = _ref2.prop,
          value = _ref2.value;
      return (0, _JSXAttributeMock2.default)(prop, value);
    });
    return (0, _JSXElementMock2.default)(name, attributes);
  });
}

function genNonInteractiveRoleElements() {
  return [].concat(_toConsumableArray(nonInteractiveRoles), ['article button', 'fakerole article button']).map(function (value) {
    return (0, _JSXElementMock2.default)('div', [(0, _JSXAttributeMock2.default)('role', value)]);
  });
}

function genAbstractRoleElements() {
  return abstractRoles.map(function (value) {
    return (0, _JSXElementMock2.default)('div', [(0, _JSXAttributeMock2.default)('role', value)]);
  });
}

function genNonAbstractRoleElements() {
  return nonAbstractRoles.map(function (value) {
    return (0, _JSXElementMock2.default)('div', [(0, _JSXAttributeMock2.default)('role', value)]);
  });
}

function genIndeterminantInteractiveElements() {
  return Object.keys(indeterminantInteractiveElementsMap).map(function (name) {
    var attributes = indeterminantInteractiveElementsMap[name].map(function (_ref3) {
      var prop = _ref3.prop,
          value = _ref3.value;
      return (0, _JSXAttributeMock2.default)(prop, value);
    });
    return (0, _JSXElementMock2.default)(name, attributes);
  });
}