#!/usr/bin/env node --harmony
'use strict';

var path = require('path');
var fs = require('fs');
var argv = require('minimist')(process.argv.slice(2)); // eslint-disable-line import/no-extraneous-dependencies
var ruleBoilerplateGenerator = require('./boilerplate/rule');
var testBoilerplateGenerator = require('./boilerplate/test');
var docBoilerplateGenerator = require('./boilerplate/doc');
var exec = require('child_process').exec;

var ruleName = argv._[0];
var author = argv.author || '$AUTHOR';
var description = argv.description || '$DESCRIPTION';

var rulePath = path.resolve('src/rules/' + ruleName + '.js');
var testPath = path.resolve('__tests__/src/rules/' + ruleName + '-test.js');
var docsPath = path.resolve('docs/rules/' + ruleName + '.md');

var jscodeshiftJSON = require('jscodeshift/package.json'); // eslint-disable-line import/no-extraneous-dependencies

var jscodeshiftMain = jscodeshiftJSON.main;
var jscodeshiftPath = require.resolve('jscodeshift');
var jscodeshiftRoot = jscodeshiftPath.slice(0, jscodeshiftPath.indexOf(jscodeshiftMain));

// Validate
if (!ruleName) {
  throw new Error('Rule name is required');
} else if (fs.existsSync(rulePath)) {
  throw new Error('Rule already exists!');
}

// Generate file boilerplate
var ruleBoilerplate = ruleBoilerplateGenerator(author, description);
var testBoilerplate = testBoilerplateGenerator(ruleName, author, description);
var docBoilerplate = docBoilerplateGenerator(ruleName);

// Create new files
fs.writeFileSync(rulePath, ruleBoilerplate);
fs.writeFileSync(testPath, testBoilerplate);
fs.writeFileSync(docsPath, docBoilerplate);

// Add the rule to the index
exec([path.join(jscodeshiftRoot, jscodeshiftJSON.bin.jscodeshift), './src/index.js', '-t ./scripts/addRuleToIndex.js', '--extensions js', '--parser flow', '--ruleName=' + ruleName, '--rulePath=' + rulePath].join(' '), function (error) {
  if (error) {
    console.error('exec error: ' + error); // eslint-disable-line no-console
  }
});