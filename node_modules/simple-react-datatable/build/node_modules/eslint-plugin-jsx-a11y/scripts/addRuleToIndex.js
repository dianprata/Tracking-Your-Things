'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformer;
var parser = exports.parser = 'flow';

function transformer(file, api, options) {
  var j = api.jscodeshift;
  var s = j(file.source);

  var _ref = options || {},
      ruleName = _ref.ruleName,
      rulePath = _ref.rulePath;

  var nameSort = function nameSort(a, b) {
    var aName = a.key.type === 'Literal' ? a.key.value : a.key.name;
    var bName = b.key.type === 'Literal' ? b.key.value : b.key.name;
    if (aName < bName) {
      return -1;
    }
    if (bName < aName) {
      return 1;
    }
    return 0;
  };

  var changesMade = 0;

  var rulePathInSrc = './' + rulePath.match(/src\/(.*)\.js/)[1];

  changesMade += s.find(j.Identifier, {
    name: 'rules'
  }).forEach(function (path, index) {
    // Add rule path.
    if (index === 0) {
      path.parentPath.value.value.properties.unshift(j.property('init', j.literal(ruleName), j.callExpression(j.identifier('require'), [j.literal(rulePathInSrc)])));
      path.parentPath.value.value.properties.sort(nameSort);
    }
    // Set default reporting to error.
    if (index === 1) {
      path.parentPath.value.value.properties.unshift(j.property('init', j.literal('jsx-a11y/' + ruleName), j.literal('error')));
      path.parentPath.value.value.properties.sort(nameSort);
    }
  }).length;

  if (changesMade === 0) {
    return null;
  }

  return s.toSource({
    quote: 'single',
    trailingComma: true
  });
}