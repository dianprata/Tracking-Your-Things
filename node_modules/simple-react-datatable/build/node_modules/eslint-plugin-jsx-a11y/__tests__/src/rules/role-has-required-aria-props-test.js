'use strict';

var _ariaQuery = require('aria-query');

var _eslint = require('eslint');

var _parserOptionsMapper = require('../../__util__/parserOptionsMapper');

var _parserOptionsMapper2 = _interopRequireDefault(_parserOptionsMapper);

var _roleHasRequiredAriaProps = require('../../../src/rules/role-has-required-aria-props');

var _roleHasRequiredAriaProps2 = _interopRequireDefault(_roleHasRequiredAriaProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /* eslint-env jest */
/**
 * @fileoverview Enforce that elements with ARIA roles must
 *  have all required attributes for that role.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

var ruleTester = new _eslint.RuleTester();

var errorMessage = function errorMessage(role) {
  var requiredProps = Object.keys(_ariaQuery.roles.get(role).requiredProps);

  return {
    message: 'Elements with the ARIA role "' + role + '" must have the following ' + ('attributes defined: ' + requiredProps),
    type: 'JSXAttribute'
  };
};

// Create basic test cases using all valid role types.
var basicValidityTests = [].concat(_toConsumableArray(_ariaQuery.roles.keys())).map(function (role) {
  var _roles$get = _ariaQuery.roles.get(role),
      requiredPropKeyValues = _roles$get.requiredProps;

  var requiredProps = Object.keys(requiredPropKeyValues);
  var propChain = requiredProps.join(' ');

  return {
    code: '<div role="' + role.toLowerCase() + '" ' + propChain + ' />'
  };
});

ruleTester.run('role-has-required-aria-props', _roleHasRequiredAriaProps2.default, {
  valid: [{ code: '<Bar baz />' },
  // Variables should pass, as we are only testing literals.
  { code: '<div />' }, { code: '<div></div>' }, { code: '<div role={role} />' }, { code: '<div role={role || "button"} />' }, { code: '<div role={role || "foobar"} />' }, { code: '<div role="row" />' }, { code: '<span role="checkbox" aria-checked="false" aria-labelledby="foo" tabindex="0"></span>' }].concat(basicValidityTests).map(_parserOptionsMapper2.default),

  invalid: [
  // SLIDER
  { code: '<div role="slider" />', errors: [errorMessage('slider')] }, {
    code: '<div role="slider" aria-valuemax />',
    errors: [errorMessage('slider')]
  }, {
    code: '<div role="slider" aria-valuemax aria-valuemin />',
    errors: [errorMessage('slider')]
  }, {
    code: '<div role="slider" aria-valuemax aria-valuenow />',
    errors: [errorMessage('slider')]
  }, {
    code: '<div role="slider" aria-valuemin aria-valuenow />',
    errors: [errorMessage('slider')]
  },

  // SPINBUTTON
  { code: '<div role="spinbutton" />', errors: [errorMessage('spinbutton')] }, {
    code: '<div role="spinbutton" aria-valuemax />',
    errors: [errorMessage('spinbutton')]
  }, {
    code: '<div role="spinbutton" aria-valuemax aria-valuemin />',
    errors: [errorMessage('spinbutton')]
  }, {
    code: '<div role="spinbutton" aria-valuemax aria-valuenow />',
    errors: [errorMessage('spinbutton')]
  }, {
    code: '<div role="spinbutton" aria-valuemin aria-valuenow />',
    errors: [errorMessage('spinbutton')]
  },

  // CHECKBOX
  { code: '<div role="checkbox" />', errors: [errorMessage('checkbox')] }, { code: '<div role="checkbox" checked />', errors: [errorMessage('checkbox')] }, {
    code: '<div role="checkbox" aria-chcked />',
    errors: [errorMessage('checkbox')]
  }, {
    code: '<span role="checkbox" aria-labelledby="foo" tabindex="0"></span>',
    errors: [errorMessage('checkbox')]
  },

  // COMBOBOX
  { code: '<div role="combobox" />', errors: [errorMessage('combobox')] }, { code: '<div role="combobox" expanded />', errors: [errorMessage('combobox')] }, {
    code: '<div role="combobox" aria-expandd />',
    errors: [errorMessage('combobox')]
  },

  // SCROLLBAR
  { code: '<div role="scrollbar" />', errors: [errorMessage('scrollbar')] }, {
    code: '<div role="scrollbar" aria-valuemax />',
    errors: [errorMessage('scrollbar')]
  }, {
    code: '<div role="scrollbar" aria-valuemax aria-valuemin />',
    errors: [errorMessage('scrollbar')]
  }, {
    code: '<div role="scrollbar" aria-valuemax aria-valuenow />',
    errors: [errorMessage('scrollbar')]
  }, {
    code: '<div role="scrollbar" aria-valuemin aria-valuenow />',
    errors: [errorMessage('scrollbar')]
  }].map(_parserOptionsMapper2.default)
});