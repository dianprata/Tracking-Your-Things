'use strict';

var _templateObject = _taggedTemplateLiteral(['<', ' role="', '" ', '={() => void 0} />'], ['<', ' role="', '" ', '={() => void 0} />']),
    _templateObject2 = _taggedTemplateLiteral(['<', ' role="', '" ', '={() => void 0} tabIndex="0" />'], ['<', ' role="', '" ', '={() => void 0} tabIndex="0" />']),
    _templateObject3 = _taggedTemplateLiteral(['Elements with the \'', '\' interactive role must be tabbable.'], ['Elements with the \'', '\' interactive role must be tabbable.']),
    _templateObject4 = _taggedTemplateLiteral(['Elements with the \'', '\' interactive role must be focusable.'], ['Elements with the \'', '\' interactive role must be focusable.']);

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _eslint = require('eslint');

var _jsxAstUtils = require('jsx-ast-utils');

var _index = require('../../../src/index');

var _parserOptionsMapper = require('../../__util__/parserOptionsMapper');

var _parserOptionsMapper2 = _interopRequireDefault(_parserOptionsMapper);

var _interactiveSupportsFocus = require('../../../src/rules/interactive-supports-focus');

var _interactiveSupportsFocus2 = _interopRequireDefault(_interactiveSupportsFocus);

var _ruleOptionsMapperFactory = require('../../__util__/ruleOptionsMapperFactory');

var _ruleOptionsMapperFactory2 = _interopRequireDefault(_ruleOptionsMapperFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-env jest */
/**
 * @fileoverview Enforce that elements with onClick handlers must be focusable.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

var ruleTester = new _eslint.RuleTester();

function template(strings) {
  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      values[_key2] = arguments[_key2];
    }

    return keys.reduce(function (acc, k, i) {
      return acc + (values[k] || '') + strings[i + 1];
    }, strings[0]);
  };
}

var ruleName = 'interactive-supports-focus';
var type = 'JSXOpeningElement';
var codeTemplate = template(_templateObject, 0, 1, 2);
var tabindexTemplate = template(_templateObject2, 0, 1, 2);
var tabbableTemplate = template(_templateObject3, 0);
var focusableTemplate = template(_templateObject4, 0);

var recommendedOptions = _index.configs.recommended.rules['jsx-a11y/' + ruleName][1] || {};

var strictOptions = _index.configs.strict.rules['jsx-a11y/' + ruleName][1] || {};

var alwaysValid = [{ code: '<div />' }, { code: '<div aria-hidden onClick={() => void 0} />' }, { code: '<div aria-hidden={true == true} onClick={() => void 0} />' }, { code: '<div aria-hidden={true === true} onClick={() => void 0} />' }, { code: '<div aria-hidden={hidden !== false} onClick={() => void 0} />' }, { code: '<div aria-hidden={hidden != false} onClick={() => void 0} />' }, { code: '<div aria-hidden={1 < 2} onClick={() => void 0} />' }, { code: '<div aria-hidden={1 <= 2} onClick={() => void 0} />' }, { code: '<div aria-hidden={2 > 1} onClick={() => void 0} />' }, { code: '<div aria-hidden={2 >= 1} onClick={() => void 0} />' }, { code: '<div onClick={() => void 0} />;' }, { code: '<div onClick={() => void 0} tabIndex={undefined} />;' }, { code: '<div onClick={() => void 0} tabIndex="bad" />;' }, { code: '<div onClick={() => void 0} role={undefined} />;' }, { code: '<div role="section" onClick={() => void 0} />' }, { code: '<div onClick={() => void 0} aria-hidden={false} />;' }, { code: '<div onClick={() => void 0} {...props} />;' }, { code: '<input type="text" onClick={() => void 0} />' }, { code: '<input type="hidden" onClick={() => void 0} tabIndex="-1" />' }, { code: '<input type="hidden" onClick={() => void 0} tabIndex={-1} />' }, { code: '<input onClick={() => void 0} />' }, { code: '<input onClick={() => void 0} role="combobox" />' }, { code: '<button onClick={() => void 0} className="foo" />' }, { code: '<option onClick={() => void 0} className="foo" />' }, { code: '<select onClick={() => void 0} className="foo" />' }, { code: '<area href="#" onClick={() => void 0} className="foo" />' }, { code: '<area onClick={() => void 0} className="foo" />' }, { code: '<textarea onClick={() => void 0} className="foo" />' }, { code: '<a onClick="showNextPage();">Next page</a>' }, { code: '<a onClick="showNextPage();" tabIndex={undefined}>Next page</a>' }, { code: '<a onClick="showNextPage();" tabIndex="bad">Next page</a>' }, { code: '<a onClick={() => void 0} />' }, { code: '<a tabIndex="0" onClick={() => void 0} />' }, { code: '<a tabIndex={dynamicTabIndex} onClick={() => void 0} />' }, { code: '<a tabIndex={0} onClick={() => void 0} />' }, { code: '<a role="button" href="#" onClick={() => void 0} />' }, { code: '<a onClick={() => void 0} href="http://x.y.z" />' }, { code: '<a onClick={() => void 0} href="http://x.y.z" tabIndex="0" />' }, { code: '<a onClick={() => void 0} href="http://x.y.z" tabIndex={0} />' }, { code: '<a onClick={() => void 0} href="http://x.y.z" role="button" />' }, { code: '<TestComponent onClick={doFoo} />' }, { code: '<input onClick={() => void 0} type="hidden" />;' }, { code: '<span onClick="submitForm();">Submit</span>' }, { code: '<span onClick="submitForm();" tabIndex={undefined}>Submit</span>' }, { code: '<span onClick="submitForm();" tabIndex="bad">Submit</span>' }, { code: '<span onClick="doSomething();" tabIndex="0">Click me!</span>' }, { code: '<span onClick="doSomething();" tabIndex={0}>Click me!</span>' }, { code: '<span onClick="doSomething();" tabIndex="-1">Click me too!</span>' }, {
  code: '<a href="javascript:void(0);" onClick="doSomething();">Click ALL the things!</a>'
}, { code: '<section onClick={() => void 0} />;' }, { code: '<main onClick={() => void 0} />;' }, { code: '<article onClick={() => void 0} />;' }, { code: '<header onClick={() => void 0} />;' }, { code: '<footer onClick={() => void 0} />;' }, { code: '<div role="button" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="checkbox" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="link" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="menuitem" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="menuitemcheckbox" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="menuitemradio" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="option" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="radio" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="spinbutton" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="switch" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="tab" tabIndex="0" onClick={() => void 0} />' }, { code: '<div role="textbox" tabIndex="0" onClick={() => void 0} />' }, { code: '<Foo.Bar onClick={() => void 0} aria-hidden={false} />;' }, { code: '<Input onClick={() => void 0} type="hidden" />;' }];

var interactiveRoles = ['button', 'checkbox', 'link', 'gridcell', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'radio', 'searchbox', 'slider', 'spinbutton', 'switch', 'tab', 'textbox', 'treeitem'];

var recommendedRoles = ['button', 'checkbox', 'link', 'searchbox', 'spinbutton', 'switch', 'textbox'];

var strictRoles = ['button', 'checkbox', 'link', 'progressbar', 'searchbox', 'slider', 'spinbutton', 'switch', 'textbox'];

var staticElements = ['div'];

var triggeringHandlers = [].concat(_toConsumableArray(_jsxAstUtils.eventHandlersByType.mouse), _toConsumableArray(_jsxAstUtils.eventHandlersByType.keyboard));

var passReducer = function passReducer(roles, handlers, messageTemplate) {
  return staticElements.reduce(function (elementAcc, element) {
    return elementAcc.concat(roles.reduce(function (roleAcc, role) {
      return roleAcc.concat(handlers.map(function (handler) {
        return {
          code: messageTemplate(element, role, handler)
        };
      }));
    }, []));
  }, []);
};

var failReducer = function failReducer(roles, handlers, messageTemplate) {
  return staticElements.reduce(function (elementAcc, element) {
    return elementAcc.concat(roles.reduce(function (roleAcc, role) {
      return roleAcc.concat(handlers.map(function (handler) {
        return {
          code: codeTemplate(element, role, handler),
          errors: [{
            type: type,
            message: messageTemplate(role)
          }]
        };
      }));
    }, []));
  }, []);
};

ruleTester.run(ruleName + ':recommended', _interactiveSupportsFocus2.default, {
  valid: [].concat(alwaysValid, _toConsumableArray(passReducer(interactiveRoles, _jsxAstUtils.eventHandlers.filter(function (handler) {
    return !(0, _arrayIncludes2.default)(triggeringHandlers, handler);
  }), codeTemplate)), _toConsumableArray(passReducer(interactiveRoles.filter(function (role) {
    return !(0, _arrayIncludes2.default)(recommendedRoles, role);
  }), _jsxAstUtils.eventHandlers.filter(function (handler) {
    return (0, _arrayIncludes2.default)(triggeringHandlers, handler);
  }), tabindexTemplate))).map((0, _ruleOptionsMapperFactory2.default)(recommendedOptions)).map(_parserOptionsMapper2.default),
  invalid: [].concat(_toConsumableArray(failReducer(recommendedRoles, triggeringHandlers, tabbableTemplate)), _toConsumableArray(failReducer(interactiveRoles.filter(function (role) {
    return !(0, _arrayIncludes2.default)(recommendedRoles, role);
  }), triggeringHandlers, focusableTemplate))).map((0, _ruleOptionsMapperFactory2.default)(recommendedOptions)).map(_parserOptionsMapper2.default)
});

ruleTester.run(ruleName + ':strict', _interactiveSupportsFocus2.default, {
  valid: [].concat(alwaysValid, _toConsumableArray(passReducer(interactiveRoles, _jsxAstUtils.eventHandlers.filter(function (handler) {
    return !(0, _arrayIncludes2.default)(triggeringHandlers, handler);
  }), codeTemplate)), _toConsumableArray(passReducer(interactiveRoles.filter(function (role) {
    return !(0, _arrayIncludes2.default)(strictRoles, role);
  }), _jsxAstUtils.eventHandlers.filter(function (handler) {
    return (0, _arrayIncludes2.default)(triggeringHandlers, handler);
  }), tabindexTemplate))).map((0, _ruleOptionsMapperFactory2.default)(strictOptions)).map(_parserOptionsMapper2.default),
  invalid: [].concat(_toConsumableArray(failReducer(strictRoles, triggeringHandlers, tabbableTemplate)), _toConsumableArray(failReducer(interactiveRoles.filter(function (role) {
    return !(0, _arrayIncludes2.default)(strictRoles, role);
  }), triggeringHandlers, focusableTemplate))).map((0, _ruleOptionsMapperFactory2.default)(strictOptions)).map(_parserOptionsMapper2.default)
});