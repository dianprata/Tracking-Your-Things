'use strict';

var _ariaQuery = require('aria-query');

var _eslint = require('eslint');

var _parserOptionsMapper = require('../../__util__/parserOptionsMapper');

var _parserOptionsMapper2 = _interopRequireDefault(_parserOptionsMapper);

var _ariaUnsupportedElements = require('../../../src/rules/aria-unsupported-elements');

var _ariaUnsupportedElements2 = _interopRequireDefault(_ariaUnsupportedElements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /* eslint-env jest */
/**
 * @fileoverview Enforce that elements that do not support ARIA roles,
 *  states and properties do not have those attributes.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

var ruleTester = new _eslint.RuleTester();

var errorMessage = function errorMessage(invalidProp) {
  return {
    message: 'This element does not support ARIA roles, states and properties. Try removing the prop \'' + invalidProp + '\'.',
    type: 'JSXOpeningElement'
  };
};

var domElements = [].concat(_toConsumableArray(_ariaQuery.dom.keys()));
// Generate valid test cases
var roleValidityTests = domElements.map(function (element) {
  var isReserved = _ariaQuery.dom.get(element).reserved || false;
  var role = isReserved ? '' : 'role';

  return {
    code: '<' + element + ' ' + role + ' />'
  };
});

var ariaValidityTests = domElements.map(function (element) {
  var isReserved = _ariaQuery.dom.get(element).reserved || false;
  var aria = isReserved ? '' : 'aria-hidden';

  return {
    code: '<' + element + ' ' + aria + ' />'
  };
});

// Generate invalid test cases.
var invalidRoleValidityTests = domElements.filter(function (element) {
  return Boolean(_ariaQuery.dom.get(element).reserved);
}).map(function (reservedElem) {
  return {
    code: '<' + reservedElem + ' role {...props} />',
    errors: [errorMessage('role')]
  };
});

var invalidAriaValidityTests = domElements.filter(function (element) {
  return Boolean(_ariaQuery.dom.get(element).reserved);
}).map(function (reservedElem) {
  return {
    code: '<' + reservedElem + ' aria-hidden {...props} />',
    errors: [errorMessage('aria-hidden')]
  };
});

ruleTester.run('aria-unsupported-elements', _ariaUnsupportedElements2.default, {
  valid: roleValidityTests.concat(ariaValidityTests).map(_parserOptionsMapper2.default),
  invalid: invalidRoleValidityTests.concat(invalidAriaValidityTests).map(_parserOptionsMapper2.default)
});