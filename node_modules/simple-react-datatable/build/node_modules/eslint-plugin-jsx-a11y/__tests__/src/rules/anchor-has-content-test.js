'use strict';

var _eslint = require('eslint');

var _parserOptionsMapper = require('../../__util__/parserOptionsMapper');

var _parserOptionsMapper2 = _interopRequireDefault(_parserOptionsMapper);

var _anchorHasContent = require('../../../src/rules/anchor-has-content');

var _anchorHasContent2 = _interopRequireDefault(_anchorHasContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

var ruleTester = new _eslint.RuleTester(); /* eslint-env jest */
/**
 * @fileoverview Enforce anchor elements to contain accessible content.
 * @author Lisa Ring & Niklas Holmberg
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

var expectedError = {
  message: 'Anchors must have content and the content must be accessible by a screen reader.',
  type: 'JSXOpeningElement'
};

ruleTester.run('anchor-has-content', _anchorHasContent2.default, {
  valid: [{ code: '<div />;' }, { code: '<a>Foo</a>' }, { code: '<a><Bar /></a>' }, { code: '<a>{foo}</a>' }, { code: '<a>{foo.bar}</a>' }, { code: '<a dangerouslySetInnerHTML={{ __html: "foo" }} />' }, { code: '<a children={children} />' }].map(_parserOptionsMapper2.default),
  invalid: [{ code: '<a />', errors: [expectedError] }, { code: '<a><Bar aria-hidden /></a>', errors: [expectedError] }, { code: '<a>{undefined}</a>', errors: [expectedError] }].map(_parserOptionsMapper2.default)
});