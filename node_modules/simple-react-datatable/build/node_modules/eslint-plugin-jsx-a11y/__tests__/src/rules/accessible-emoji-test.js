'use strict';

var _eslint = require('eslint');

var _parserOptionsMapper = require('../../__util__/parserOptionsMapper');

var _parserOptionsMapper2 = _interopRequireDefault(_parserOptionsMapper);

var _accessibleEmoji = require('../../../src/rules/accessible-emoji');

var _accessibleEmoji2 = _interopRequireDefault(_accessibleEmoji);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

var ruleTester = new _eslint.RuleTester(); /* eslint-env jest */
/**
 * @fileoverview Enforce <marquee> elements are not used.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

var expectedError = {
  message: 'Emojis should be wrapped in <span>, have role="img", and have an accessible description with aria-label or aria-labelledby.',
  type: 'JSXOpeningElement'
};

ruleTester.run('accessible-emoji', _accessibleEmoji2.default, {
  valid: [{ code: '<div />;' }, { code: '<span />' }, { code: '<span>No emoji here!</span>' }, { code: '<span role="img" aria-label="Panda face">🐼</span>' }, { code: '<span role="img" aria-label="Snowman">&#9731;</span>' }, { code: '<span role="img" aria-labelledby="id1">🐼</span>' }, { code: '<span role="img" aria-labelledby="id1">&#9731;</span>' }, { code: '<span role="img" aria-labelledby="id1" aria-label="Snowman">&#9731;</span>' }, { code: '<span>{props.emoji}</span>' }].map(_parserOptionsMapper2.default),
  invalid: [{ code: '<span>🐼</span>', errors: [expectedError] }, { code: '<span>foo🐼bar</span>', errors: [expectedError] }, { code: '<span>foo 🐼 bar</span>', errors: [expectedError] }, { code: '<i role="img" aria-label="Panda face">🐼</i>', errors: [expectedError] }, { code: '<i role="img" aria-labelledby="id1">🐼</i>', errors: [expectedError] }, { code: '<Foo>🐼</Foo>', errors: [expectedError] }].map(_parserOptionsMapper2.default)
});