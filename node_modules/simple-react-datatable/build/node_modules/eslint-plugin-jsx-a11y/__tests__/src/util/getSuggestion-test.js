'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _getSuggestion = require('../../../src/util/getSuggestion');

var _getSuggestion2 = _interopRequireDefault(_getSuggestion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env jest */
describe('spell check suggestion API', function () {
  it('should return no suggestions given empty word and no dictionary', function () {
    var word = '';
    var expected = [];
    var actual = (0, _getSuggestion2.default)(word);

    _assert2.default.deepEqual(expected, actual);
  });

  it('should return no suggestions given real word and no dictionary', function () {
    var word = 'foo';
    var expected = [];
    var actual = (0, _getSuggestion2.default)(word);

    _assert2.default.deepEqual(expected, actual);
  });

  it('should return correct suggestion given real word and a dictionary', function () {
    var word = 'fo';
    var dictionary = ['foo', 'bar', 'baz'];
    var expected = ['foo'];
    var actual = (0, _getSuggestion2.default)(word, dictionary);

    _assert2.default.deepEqual(expected, actual);
  });

  it('should return multiple correct suggestions given real word and a dictionary', function () {
    var word = 'theer';
    var dictionary = ['there', 'their', 'foo', 'bar'];
    var expected = ['there', 'their'];
    var actual = (0, _getSuggestion2.default)(word, dictionary);

    _assert2.default.deepEqual(expected, actual);
  });

  it('should return correct # of suggestions given the limit argument', function () {
    var word = 'theer';
    var dictionary = ['there', 'their', 'foo', 'bar'];
    var limit = 1;
    var expected = 1;
    var actual = (0, _getSuggestion2.default)(word, dictionary, limit).length;

    _assert2.default.deepEqual(expected, actual);
  });
});