'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _jsxAstUtils = require('jsx-ast-utils');

var _isInteractiveRole = require('../../../src/util/isInteractiveRole');

var _isInteractiveRole2 = _interopRequireDefault(_isInteractiveRole);

var _genInteractives = require('../../../__mocks__/genInteractives');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env mocha */
describe('isInteractiveRole', function () {
  describe('JSX Components (no tagName)', function () {
    it('should identify them as interactive role elements', function () {
      (0, _expect2.default)((0, _isInteractiveRole2.default)(undefined, [])).toBe(false);
    });
  });
  describe('elements with a non-interactive role', function () {
    (0, _genInteractives.genNonInteractiveRoleElements)().forEach(function (_ref) {
      var openingElement = _ref.openingElement;

      var attributes = openingElement.attributes;
      it('should not identify `' + (0, _genInteractives.genElementSymbol)(openingElement) + '` as an interactive role element', function () {
        (0, _expect2.default)((0, _isInteractiveRole2.default)((0, _jsxAstUtils.elementType)(openingElement), attributes)).toBe(false);
      });
    });
  });
  describe('elements without a role', function () {
    it('should not identify them as interactive role elements', function () {
      (0, _expect2.default)((0, _isInteractiveRole2.default)('div', [])).toBe(false);
    });
  });
  describe('elements with an interactive role', function () {
    (0, _genInteractives.genInteractiveRoleElements)().forEach(function (_ref2) {
      var openingElement = _ref2.openingElement;

      var attributes = openingElement.attributes;
      it('should identify `' + (0, _genInteractives.genElementSymbol)(openingElement) + '` as an interactive role element', function () {
        (0, _expect2.default)((0, _isInteractiveRole2.default)((0, _jsxAstUtils.elementType)(openingElement), attributes)).toBe(true);
      });
    });
  });
});