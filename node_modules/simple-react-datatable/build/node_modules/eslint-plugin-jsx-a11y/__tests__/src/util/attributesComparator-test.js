'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _attributesComparator = require('../../../src/util/attributesComparator');

var _attributesComparator2 = _interopRequireDefault(_attributesComparator);

var _JSXAttributeMock = require('../../../__mocks__/JSXAttributeMock');

var _JSXAttributeMock2 = _interopRequireDefault(_JSXAttributeMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('attributesComparator', function () {
  describe('base attributes', function () {
    var baseAttributes = void 0;
    var attributes = void 0;
    describe('are undefined', function () {
      describe('and attributes are undefined', function () {
        it('should return true', function () {
          (0, _expect2.default)((0, _attributesComparator2.default)()).toBe(true);
        });
      });
    });
    describe('are empty', function () {
      beforeEach(function () {
        baseAttributes = [];
      });
      describe('and attributes', function () {
        describe('are empty', function () {
          attributes = [];
          it('should return true', function () {
            (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(true);
          });
        });
        describe('have values', function () {
          attributes = [(0, _JSXAttributeMock2.default)('foo', 0), (0, _JSXAttributeMock2.default)('bar', 'baz')];
          it('should return true', function () {
            (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(true);
          });
        });
      });
    });
    describe('have values', function () {
      beforeEach(function () {
        baseAttributes = [{
          name: 'biz',
          value: 1
        }, {
          name: 'fizz',
          value: 'pop'
        }, {
          name: 'fuzz',
          value: 'lolz'
        }];
      });
      describe('and attributes', function () {
        describe('are empty', function () {
          attributes = [];
          it('should return false', function () {
            (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(false);
          });
        });
        describe('have values', function () {
          describe('and the values are the different', function () {
            it('should return false', function () {
              attributes = [(0, _JSXAttributeMock2.default)('biz', 2), (0, _JSXAttributeMock2.default)('ziff', 'opo'), (0, _JSXAttributeMock2.default)('far', 'lolz')];
              (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(false);
            });
          });
          describe('and the values are a subset', function () {
            it('should return true', function () {
              attributes = [(0, _JSXAttributeMock2.default)('biz', 1), (0, _JSXAttributeMock2.default)('fizz', 'pop'), (0, _JSXAttributeMock2.default)('goo', 'gazz')];
              (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(false);
            });
          });
          describe('and the values are the same', function () {
            it('should return true', function () {
              attributes = [(0, _JSXAttributeMock2.default)('biz', 1), (0, _JSXAttributeMock2.default)('fizz', 'pop'), (0, _JSXAttributeMock2.default)('fuzz', 'lolz')];
              (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(true);
            });
          });
          describe('and the values are a superset', function () {
            it('should return true', function () {
              attributes = [(0, _JSXAttributeMock2.default)('biz', 1), (0, _JSXAttributeMock2.default)('fizz', 'pop'), (0, _JSXAttributeMock2.default)('fuzz', 'lolz'), (0, _JSXAttributeMock2.default)('dar', 'tee')];
              (0, _expect2.default)((0, _attributesComparator2.default)(baseAttributes, attributes)).toBe(true);
            });
          });
        });
      });
    });
  });
}); /* eslint-env mocha */