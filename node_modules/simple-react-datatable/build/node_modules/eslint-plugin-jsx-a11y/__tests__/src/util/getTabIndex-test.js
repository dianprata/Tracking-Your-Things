'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env jest */


var _getTabIndex = require('../../../src/util/getTabIndex');

var _getTabIndex2 = _interopRequireDefault(_getTabIndex);

var _IdentifierMock = require('../../../__mocks__/IdentifierMock');

var _IdentifierMock2 = _interopRequireDefault(_IdentifierMock);

var _JSXAttributeMock = require('../../../__mocks__/JSXAttributeMock');

var _JSXAttributeMock2 = _interopRequireDefault(_JSXAttributeMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getTabIndex', function () {
  describe('tabIndex is defined', function () {
    describe('as a number ', function () {
      describe('zero', function () {
        it('should return zero', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', 0))).toBe(0);
        });
      });
      describe('positive integer', function () {
        it('should return the integer', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', 1))).toBe(1);
        });
      });
      describe('negative integer', function () {
        it('should return the integer', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', -1))).toBe(-1);
        });
      });
      describe('float', function () {
        it('should return undefined', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', 9.1))).toBeUndefined();
        });
      });
    });
    describe('as a string', function () {
      describe('empty', function () {
        it('should return undefined', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', ''))).toBeUndefined();
        });
      });
      describe('which converts to a number', function () {
        it('should return an integer', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', '0'))).toBe(0);
        });
      });
      describe('which is NaN', function () {
        it('should return undefined', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', '0a'))).toBeUndefined();
        });
      });
    });
    describe('as a boolean', function () {
      describe('true', function () {
        it('should return undefined', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', true))).toBeUndefined();
        });
      });
      describe('false', function () {
        it('should return undefined', function () {
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', false))).toBeUndefined();
        });
      });
    });
    describe('as an expression', function () {
      describe('function expression', function () {
        it('should return the correct type', function () {
          var attr = function mockFn() {
            return 0;
          };
          expect(_typeof((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', attr)))).toEqual('function');
        });
      });
      describe('variable expression', function () {
        it('should return the Identifier name', function () {
          var name = 'identName';
          expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', (0, _IdentifierMock2.default)(name), true))).toEqual(name);
        });
      });
    });
  });
  describe('tabIndex is not defined', function () {
    it('should return undefined', function () {
      expect((0, _getTabIndex2.default)((0, _JSXAttributeMock2.default)('tabIndex', undefined))).toBeUndefined();
    });
  });
});