'use strict';

var _hasAccessibleChild = require('../../../src/util/hasAccessibleChild');

var _hasAccessibleChild2 = _interopRequireDefault(_hasAccessibleChild);

var _JSXElementMock = require('../../../__mocks__/JSXElementMock');

var _JSXElementMock2 = _interopRequireDefault(_JSXElementMock);

var _JSXAttributeMock = require('../../../__mocks__/JSXAttributeMock');

var _JSXAttributeMock2 = _interopRequireDefault(_JSXAttributeMock);

var _JSXExpressionContainerMock = require('../../../__mocks__/JSXExpressionContainerMock');

var _JSXExpressionContainerMock2 = _interopRequireDefault(_JSXExpressionContainerMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env jest */
describe('hasAccessibleChild', function () {
  describe('has no children and does not set dangerouslySetInnerHTML', function () {
    it('returns false', function () {
      expect((0, _hasAccessibleChild2.default)((0, _JSXElementMock2.default)('div', []))).toBe(false);
    });
  });

  describe('has no children and sets dangerouslySetInnerHTML', function () {
    it('Returns true', function () {
      var prop = (0, _JSXAttributeMock2.default)('dangerouslySetInnerHTML', true);
      var element = (0, _JSXElementMock2.default)('div', [prop], []);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(true);
    });
  });

  describe('has children', function () {
    it('Returns true for a Literal child', function () {
      var child = {
        type: 'Literal',
        value: 'foo'
      };
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(true);
    });

    it('Returns true for visible child JSXElement', function () {
      var child = (0, _JSXElementMock2.default)('div', []);
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(true);
    });

    it('Returns false for hidden child JSXElement', function () {
      var ariaHiddenAttr = (0, _JSXAttributeMock2.default)('aria-hidden', true);
      var child = (0, _JSXElementMock2.default)('div', [ariaHiddenAttr]);
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(false);
    });

    it('Returns true for defined JSXExpressionContainer', function () {
      var expression = {
        type: 'Identifier',
        name: 'foo'
      };
      var child = (0, _JSXExpressionContainerMock2.default)(expression);
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(true);
    });

    it('Returns false for undefined JSXExpressionContainer', function () {
      var expression = {
        type: 'Identifier',
        name: 'undefined'
      };
      var child = (0, _JSXExpressionContainerMock2.default)(expression);
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(false);
    });

    it('Returns false for unknown child type', function () {
      var child = {
        type: 'Unknown'
      };
      var element = (0, _JSXElementMock2.default)('div', [], [child]);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(false);
    });

    it('Returns true with children passed as a prop', function () {
      var children = (0, _JSXAttributeMock2.default)('children', true);
      var element = (0, _JSXElementMock2.default)('div', [children], []);
      expect((0, _hasAccessibleChild2.default)(element)).toBe(true);
    });
  });
});