'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env mocha */


var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helper = require('../helper');

var _propName = require('../../src/propName');

var _propName2 = _interopRequireDefault(_propName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('propName', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _propName2.default === 'undefined' ? 'undefined' : _typeof(_propName2.default);

    _assert2.default.equal(expected, actual);
  });

  it('should throw an error if the argument is missing', function () {
    _assert2.default.throws(function () {
      (0, _propName2.default)();
    }, Error);
  });

  it('should throw an error if the argument not a JSX node', function () {
    _assert2.default.throws(function () {
      (0, _propName2.default)({ a: 'foo' });
    }, Error);
  });

  it('should return correct name for normal prop', function () {
    var prop = (0, _helper.extractProp)('<div foo="bar" />');

    var expected = 'foo';
    var actual = (0, _propName2.default)(prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return correct name for namespaced prop', function () {
    var prop = (0, _helper.extractProp)('<div foo:bar="baz" />', 'foo:bar');

    var expected = 'foo:bar';
    var actual = (0, _propName2.default)(prop);

    _assert2.default.equal(expected, actual);
  });

  // Note: this shouldn't happen, but safe guard anyway.
  it('should return undefined if prop name is not JSXIdentifier or JSXNamespacedName', function () {
    var prop = {
      type: 'JSXAttribute',
      name: {
        type: 'Literal'
      }
    };

    var expected = undefined;
    var actual = (0, _propName2.default)(prop);

    _assert2.default.equal(expected, actual);
  });
});