'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env mocha */
/* eslint no-template-curly-in-string: 0 */


var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helper = require('../helper');

var _getPropValue = require('../../src/getPropValue');

var _getPropValue2 = _interopRequireDefault(_getPropValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getPropValue', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _getPropValue2.default === 'undefined' ? 'undefined' : _typeof(_getPropValue2.default);

    _assert2.default.equal(expected, actual);
  });

  it('should return undefined when not provided with a JSXAttribute', function () {
    var expected = undefined;
    var actual = (0, _getPropValue2.default)(1);

    _assert2.default.equal(expected, actual);
  });

  it('should throw error when trying to get value from unknown node type', function () {
    var prop = {
      type: 'JSXAttribute',
      value: {
        type: 'JSXExpressionContainer'
      }
    };

    _assert2.default.throws(function () {
      (0, _getPropValue2.default)(prop);
    }, Error);
  });

  describe('Null', function () {
    it('should return true when no value is given', function () {
      var prop = (0, _helper.extractProp)('<div foo />');

      var expected = true;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Literal', function () {
    it('should return correct string if value is a string', function () {
      var prop = (0, _helper.extractProp)('<div foo="bar" />');

      var expected = 'bar';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return correct string if value is a string expression', function () {
      var prop = (0, _helper.extractProp)('<div foo={"bar"} />');

      var expected = 'bar';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return correct integer if value is a integer expression', function () {
      var prop = (0, _helper.extractProp)('<div foo={1} />');

      var expected = 1;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should convert "true" to boolean type', function () {
      var prop = (0, _helper.extractProp)('<div foo="true" />');

      var expected = true;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should convert "false" to boolean type', function () {
      var prop = (0, _helper.extractProp)('<div foo="false" />');

      var expected = false;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('JSXElement', function () {
    it('should return correct representation of JSX element as a string', function () {
      var prop = (0, _helper.extractProp)('<div foo=<bar /> />');

      var expected = '<bar />';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Identifier', function () {
    it('should return string representation of variable identifier', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar} />');

      var expected = 'bar';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return undefined when identifier is literally `undefined`', function () {
      var prop = (0, _helper.extractProp)('<div foo={undefined} />');

      var expected = undefined;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return String object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={String} />');

      var expected = String;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Array object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Array} />');

      var expected = Array;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Date object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Date} />');

      var expected = Date;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Infinity object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Infinity} />');

      var expected = Infinity;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Math object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Math} />');

      var expected = Math;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Number object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Number} />');

      var expected = Number;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return Object object when using a reserved JavaScript object', function () {
      var prop = (0, _helper.extractProp)('<div foo={Object} />');

      var expected = Object;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Template literal', function () {
    it('should return template literal with vars wrapped in curly braces', function () {
      var prop = (0, _helper.extractProp)('<div foo={`bar ${baz}`} />');

      var expected = 'bar {baz}';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should drop variables in template literals that are literally undefined', function () {
      var prop = (0, _helper.extractProp)('<div foo={`bar ${undefined}`} />');

      var expected = 'bar ';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return template literal with expression type wrapped in curly braces', function () {
      var prop = (0, _helper.extractProp)('<div foo={`bar ${baz()}`} />');

      var expected = 'bar {CallExpression}';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should ignore non-expressions in the template literal', function () {
      var prop = (0, _helper.extractProp)('<div foo={`bar ${<baz />}`} />');

      var expected = 'bar ';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Tagged Template literal', function () {
    it('should return template literal with vars wrapped in curly braces', function () {
      var prop = (0, _helper.extractProp)('<div foo={noop`bar ${baz}`} />');

      var expected = 'bar {baz}';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should drop variables in template literals that are literally undefined', function () {
      var prop = (0, _helper.extractProp)('<div foo={noop`bar ${undefined}`} />');

      var expected = 'bar ';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return template literal with expression type wrapped in curly braces', function () {
      var prop = (0, _helper.extractProp)('<div foo={noop`bar ${baz()}`} />');

      var expected = 'bar {CallExpression}';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should ignore non-expressions in the template literal', function () {
      var prop = (0, _helper.extractProp)('<div foo={noop`bar ${<baz />}`} />');

      var expected = 'bar ';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Arrow function expression', function () {
    it('should return a function', function () {
      var prop = (0, _helper.extractProp)('<div foo={ () => { return "bar"; }} />');

      var expected = 'function';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, typeof actual === 'undefined' ? 'undefined' : _typeof(actual));

      // For code coverage ¯\_(ツ)_/¯
      actual();
    });
    it('should handle ArrowFunctionExpression as conditional consequent', function () {
      var prop = (0, _helper.extractProp)('<div foo={ (true) ? () => null : () => ({})} />');

      var expected = 'function';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, typeof actual === 'undefined' ? 'undefined' : _typeof(actual));

      // For code coverage ¯\_(ツ)_/¯
      actual();
    });
  });

  describe('Function expression', function () {
    it('should return a function', function () {
      var prop = (0, _helper.extractProp)('<div foo={ function() { return "bar"; } } />');

      var expected = 'function';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, typeof actual === 'undefined' ? 'undefined' : _typeof(actual));

      // For code coverage ¯\_(ツ)_/¯
      actual();
    });
  });

  describe('Logical expression', function () {
    it('should correctly infer result of && logical expression based on derived values', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar && baz} />');

      var expected = 'baz';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return undefined when evaluating `undefined && undefined` ', function () {
      var prop = (0, _helper.extractProp)('<div foo={undefined && undefined} />');

      var expected = undefined;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should correctly infer result of || logical expression based on derived values', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar || baz} />');

      var expected = 'bar';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should correctly infer result of || logical expression based on derived values', function () {
      var prop = (0, _helper.extractProp)('<div foo={undefined || baz} />');

      var expected = 'baz';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return undefined when evaluating `undefined || undefined` ', function () {
      var prop = (0, _helper.extractProp)('<div foo={undefined || undefined} />');

      var expected = undefined;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Member expression', function () {
    it('should return string representation of form `object.property`', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar.baz} />');

      var expected = 'bar.baz';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Call expression', function () {
    it('should return string representation of callee', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar()} />');

      var expected = 'bar';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return string representation of callee', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar.call()} />');

      var expected = 'bar.call';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Unary expression', function () {
    it('should correctly evaluate an expression that prefixes with -', function () {
      var prop = (0, _helper.extractProp)('<div foo={-bar} />');

      // -"bar" => NaN
      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with -', function () {
      var prop = (0, _helper.extractProp)('<div foo={-42} />');

      var expected = -42;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with +', function () {
      var prop = (0, _helper.extractProp)('<div foo={+bar} />');

      // +"bar" => NaN
      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with +', function () {
      var prop = (0, _helper.extractProp)('<div foo={+42} />');

      var expected = 42;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with !', function () {
      var prop = (0, _helper.extractProp)('<div foo={!bar} />');

      var expected = false; // !"bar" === false
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with ~', function () {
      var prop = (0, _helper.extractProp)('<div foo={~bar} />');

      var expected = -1; // ~"bar" === -1
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return true when evaluating `delete foo`', function () {
      var prop = (0, _helper.extractProp)('<div foo={delete x} />');

      var expected = true;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should return undefined when evaluating `void foo`', function () {
      var prop = (0, _helper.extractProp)('<div foo={void x} />');

      var expected = undefined;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    // TODO: We should fix this to check to see if we can evaluate it.
    it('should return undefined when evaluating `typeof foo`', function () {
      var prop = (0, _helper.extractProp)('<div foo={typeof x} />');

      var expected = undefined;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Update expression', function () {
    it('should correctly evaluate an expression that prefixes with ++', function () {
      var prop = (0, _helper.extractProp)('<div foo={++bar} />');

      // ++"bar" => NaN
      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that prefixes with --', function () {
      var prop = (0, _helper.extractProp)('<div foo={--bar} />');

      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that suffixes with ++', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar++} />');

      // "bar"++ => NaN
      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });

    it('should correctly evaluate an expression that suffixes with --', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar--} />');

      var expected = true;
      var actual = isNaN((0, _getPropValue2.default)(prop));

      _assert2.default.equal(expected, actual);
    });
  });

  describe('This expression', function () {
    it('should return string value `this`', function () {
      var prop = (0, _helper.extractProp)('<div foo={this} />');

      var expected = 'this';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Conditional expression', function () {
    it('should evaluate the conditional based on the derived values correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={bar ? baz : bam} />');

      var expected = 'baz';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the conditional based on the derived values correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={undefined ? baz : bam} />');

      var expected = 'bam';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the conditional based on the derived values correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={(1 > 2) ? baz : bam} />');

      var expected = 'bam';
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Binary expression', function () {
    it('should evaluate the `==` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 == "1"} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 == bar} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `!=` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 != "2"} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 != "1"} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `===` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 === 1} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 === "1"} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `!==` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 !== "1"} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 !== 1} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `<` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 < 2} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 < 0} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `>` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 > 0} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 > 2} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `<=` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 <= 1} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 <= 0} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `>=` operator correctly', function () {
      var trueProp = (0, _helper.extractProp)('<div foo={1 >= 1} />');
      var falseProp = (0, _helper.extractProp)('<div foo={1 >= 2} />');

      var trueVal = (0, _getPropValue2.default)(trueProp);
      var falseVal = (0, _getPropValue2.default)(falseProp);

      _assert2.default.equal(true, trueVal);
      _assert2.default.equal(false, falseVal);
    });

    it('should evaluate the `<<` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={1 << 2} />');

      var expected = 4;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `>>` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={1 >> 2} />');

      var expected = 0;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `>>>` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={2 >>> 1} />');

      var expected = 1;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `+` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={1 + 1} />');

      var expected = 2;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `-` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={1 - 1} />');

      var expected = 0;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `*` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 * 10} />');

      var expected = 100;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `/` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 / 2} />');

      var expected = 5;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `%` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 % 3} />');

      var expected = 1;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `|` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 | 1} />');

      var expected = 11;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `^` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 ^ 1} />');

      var expected = 11;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `&` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={10 & 1} />');

      var expected = 0;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `in` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={foo in bar} />');

      var expected = false;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `instanceof` operator correctly', function () {
      var prop = (0, _helper.extractProp)('<div foo={{} instanceof Object} />');

      var expected = true;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });

    it('should evaluate the `instanceof` operator when right side is not a function', function () {
      var prop = (0, _helper.extractProp)('<div foo={"bar" instanceof Baz} />');

      var expected = false;
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.equal(expected, actual);
    });
  });

  describe('Object expression', function () {
    it('should evaluate to a correct representation of the object in props', function () {
      var prop = (0, _helper.extractProp)('<div foo={ { bar: "baz" } } />');

      var expected = { bar: 'baz' };
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.deepEqual(expected, actual);
    });
  });

  describe('New expression', function () {
    it('should return a new empty object', function () {
      var prop = (0, _helper.extractProp)('<div foo={new Bar()} />');

      var expected = {};
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.deepEqual(expected, actual);
    });
  });

  describe('Array expression', function () {
    it('should evaluate to correct representation of the the array in props', function () {
      var prop = (0, _helper.extractProp)('<div foo={["bar", 42, null]} />');

      var expected = ['bar', 42, null];
      var actual = (0, _getPropValue2.default)(prop);

      _assert2.default.deepEqual(expected, actual);
    });
  });

  it('should return an empty array provided an empty array in props', function () {
    var prop = (0, _helper.extractProp)('<div foo={[]} />');

    var expected = [];
    var actual = (0, _getPropValue2.default)(prop);

    _assert2.default.deepEqual(expected, actual);
  });
});