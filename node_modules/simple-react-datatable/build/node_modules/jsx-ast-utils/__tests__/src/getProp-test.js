'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env mocha */


var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helper = require('../helper');

var _getProp = require('../../src/getProp');

var _getProp2 = _interopRequireDefault(_getProp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getProp', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _getProp2.default === 'undefined' ? 'undefined' : _typeof(_getProp2.default);

    _assert2.default.equal(expected, actual);
  });

  it('should return undefined if no arguments are provided', function () {
    var expected = undefined;
    var actual = (0, _getProp2.default)();

    _assert2.default.equal(expected, actual);
  });

  it('should return undefined if the attribute is absent', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = undefined;
    var actual = (0, _getProp2.default)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return the correct attribute if the attribute exists', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = 'id';
    var actual = (0, _getProp2.default)(props, prop).name.name;

    _assert2.default.equal(expected, actual);
  });

  it('should return undefined if the attribute may exist in spread', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = undefined;
    var actual = (0, _getProp2.default)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return undefined if the attribute is considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      ignoreCase: false
    };

    var expected = undefined;
    var actual = (0, _getProp2.default)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });
});