'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _eventHandlers = require('../../src/eventHandlers');

var _eventHandlers2 = _interopRequireDefault(_eventHandlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env mocha */
describe('eventHandlers', function () {
  it('should contain a list of common JSX event handlers', function () {
    (0, _assert2.default)(['onCopy', 'onCut', 'onPaste', 'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onFocus', 'onBlur', 'onChange', 'onInput', 'onSubmit', 'onClick', 'onContextMenu', 'onDblClick', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onSelect', 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart', 'onScroll', 'onWheel', 'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting', 'onLoad', 'onError', 'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration', 'onTransitionEnd'].every(function (handlerName) {
      return _eventHandlers2.default.includes(handlerName);
    }));
  });
});

describe('eventHandlersByType', function () {
  it('should be keyed by type', function () {
    (0, _assert2.default)(['clipboard', 'composition', 'keyboard', 'focus', 'form', 'mouse', 'selection', 'touch', 'ui', 'wheel', 'media', 'image', 'animation', 'transition'].every(function (type) {
      return !!_eventHandlers.eventHandlersByType[type];
    }));
  });
});