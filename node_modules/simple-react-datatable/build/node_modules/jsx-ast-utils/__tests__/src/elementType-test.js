'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env mocha */


var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helper = require('../helper');

var _elementType = require('../../src/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('elementType tests', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _elementType2.default === 'undefined' ? 'undefined' : _typeof(_elementType2.default);

    _assert2.default.equal(expected, actual);
  });

  it('should throw an error if the argument is missing', function () {
    _assert2.default.throws(function () {
      (0, _elementType2.default)();
    }, Error);
  });

  it('should throw an error if the argument not a JSX node', function () {
    _assert2.default.throws(function () {
      (0, _elementType2.default)({ a: 'foo' });
    }, Error);
  });

  it('should return the correct type of the DOM element given its node object', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'div';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });

  it('should return the correct type of the custom element given its node object', function () {
    var code = '<Slider />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'Slider';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });

  it('should return the correct type of the custom object element given its node object', function () {
    var code = '<UX.Slider />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'UX.Slider';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });

  it('should return the correct type of the namespaced element given its node object', function () {
    var code = '<UX:Slider />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'UX:Slider';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });

  it('should return the correct type of the multiple custom object element given its node object', function () {
    var code = '<UX.Slider.Blue.Light />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'UX.Slider.Blue.Light';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });

  it('should return this.Component when given its node object', function () {
    var code = '<this.Component />';
    var node = (0, _helper.getOpeningElement)(code);

    var expected = 'this.Component';
    var actual = (0, _elementType2.default)(node);

    _assert2.default.equal(expected, actual);
  });
});