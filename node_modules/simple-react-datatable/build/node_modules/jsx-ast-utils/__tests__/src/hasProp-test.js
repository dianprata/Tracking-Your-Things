'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-env mocha */


var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helper = require('../helper');

var _hasProp = require('../../src/hasProp');

var _hasProp2 = _interopRequireDefault(_hasProp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('hasProp', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _hasProp2.default === 'undefined' ? 'undefined' : _typeof(_hasProp2.default);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if no arguments are provided', function () {
    var expected = false;
    var actual = (0, _hasProp2.default)();

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is absent', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = false;
    var actual = (0, _hasProp2.default)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the prop exists', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = true;
    var actual = (0, _hasProp2.default)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the prop may exist in spread loose mode', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      spreadStrict: false
    };

    var expected = true;
    var actual = (0, _hasProp2.default)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      ignoreCase: false
    };

    var expected = false;
    var actual = (0, _hasProp2.default)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });
});

describe('hasAnyProp tests', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _hasProp.hasAnyProp === 'undefined' ? 'undefined' : _typeof(_hasProp.hasAnyProp);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if no arguments are provided', function () {
    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)();

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is absent', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are absent in array', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = ['id', 'className'];

    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are absent in space delimited string', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = 'id className';

    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the prop exists', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = true;
    var actual = (0, _hasProp.hasAnyProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if any prop exists in array', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['className', 'id'];

    var expected = true;
    var actual = (0, _hasProp.hasAnyProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if any prop exists in space delimited string', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'className id';

    var expected = true;
    var actual = (0, _hasProp.hasAnyProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the prop may exist in spread loose mode', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      spreadStrict: false
    };

    var expected = true;
    var actual = (0, _hasProp.hasAnyProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if any prop may exist in spread loose mode', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['id', 'className'];
    var options = {
      spreadStrict: false
    };

    var expected = true;
    var actual = (0, _hasProp.hasAnyProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      ignoreCase: false
    };

    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['id', 'iD', 'className'];
    var options = {
      ignoreCase: false
    };

    var expected = false;
    var actual = (0, _hasProp.hasAnyProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });
});

describe('hasEveryProp tests', function () {
  it('should export a function', function () {
    var expected = 'function';
    var actual = typeof _hasProp.hasEveryProp === 'undefined' ? 'undefined' : _typeof(_hasProp.hasEveryProp);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if no arguments are provided', function () {
    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)();

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is absent', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if any props are absent in array', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = ['id', 'className'];

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are absent in array', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = ['id', 'className'];

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if any props are absent in space delimited string', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = 'id className';

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are absent in space delimited string', function () {
    var code = '<div />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var propsToCheck = 'id className';

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, propsToCheck);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the prop exists', function () {
    var code = '<div id="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if all props exist in array', function () {
    var code = '<div id="foo" className="box" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['className', 'id'];

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if all props exist in space delimited string', function () {
    var code = '<div id="foo" className="box" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'className id';

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if the props may exist in spread loose mode', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      spreadStrict: false
    };

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if all props may exist in spread loose mode', function () {
    var code = '<div {...props} />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['id', 'className'];
    var options = {
      spreadStrict: false
    };

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if the prop is considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = 'id';
    var options = {
      ignoreCase: false
    };

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return false if all props are considered absent in case-sensitive mode', function () {
    var code = '<div ID="foo" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['id', 'iD', 'className'];
    var options = {
      ignoreCase: false
    };

    var expected = false;
    var actual = (0, _hasProp.hasEveryProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });

  it('should return true if all props are considered present in case-sensitive mode', function () {
    var code = '<div ID="foo" className="box" />';
    var node = (0, _helper.getOpeningElement)(code);
    var props = node.attributes;

    var prop = ['ID', 'className'];
    var options = {
      ignoreCase: false
    };

    var expected = true;
    var actual = (0, _hasProp.hasEveryProp)(props, prop, options);

    _assert2.default.equal(expected, actual);
  });
});